import type { DefaultSharedModuleContext, LangiumServices, LangiumSharedServices, Module, PartialLangiumServices } from 'langium';
import { createDefaultModule, createDefaultSharedModule, inject } from 'langium';
import { RobotmlGeneratedModule, RobotmlGeneratedSharedModule } from './generated/module.js';
import { RobotmlValidator, registerValidationChecks } from './robotml-validator.js';
import { RobotmlAcceptWeaver, weaveAcceptMethods } from './visitors/accept-weaver.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type RobotmlAddedServices = {
    validation: {
        RobotmlValidator: RobotmlValidator,
        RobotmlAcceptWeaver: RobotmlAcceptWeaver
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type RobotmlServices = LangiumServices & RobotmlAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const RobotmlModule: Module<RobotmlServices, PartialLangiumServices & RobotmlAddedServices> = {
    validation: {
        RobotmlValidator: () => new RobotmlValidator(),
        RobotmlAcceptWeaver: () => new RobotmlAcceptWeaver()
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createRobotmlServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    Robotml: RobotmlServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        RobotmlGeneratedSharedModule
    );
    const Robotml = inject(
        createDefaultModule({ shared }),
        RobotmlGeneratedModule,
        RobotmlModule
    );
    shared.ServiceRegistry.register(Robotml);
    registerValidationChecks(Robotml);
    weaveAcceptMethods(Robotml);

    return { shared, Robotml };
}
